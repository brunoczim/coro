var searchIndex = {};
searchIndex["coro"] = {"doc":"This crate implements coroutines in rust. Please note that, in this implementation, one cannot yield a function inside some control flow structre. Instead, the function must return either a `Yield` or a `Done`. Note also that a coroutine may not be an actual function. The coroutine only has to implement the trait `Coroutine<T>`. Actually, functions by themselves are not coroutines. Instead, they must be wrapped with `CoFn` or a custom wrapper. Look at this example. ```rust extern crate coro;","items":[[3,"CoId","coro","Identifies a single coroutine instance in a scheduler.",null,null],[3,"CoFn","","A boilerplate reduction for corroutines implemented as regular rust functions.",null,null],[3,"CoTasking","","Builds a Co-operative tasking with some given coroutines.",null,null],[3,"Scheduler","","A type that manages a co-operative tasking execution. Mostly invisible.",null,null],[4,"Pause","","Must be returned from a single call of `resume`.",null,null],[13,"Yield","","This means that the coroutine indeed paused. It contains the next function and a message.",0,null],[13,"Done","","This means that the coroutine actually stopped. This will make all tasks stop. It contains a final value.",0,null],[8,"Coroutine","","This trait defines a coroutine in order to be used with this crate.",null,null],[10,"init","","Initializes self, so it can, as an example, grab all necessary ids.",1,{"inputs":[{"name":"self"},{"name":"scheduler"}],"output":null}],[10,"resume","","Resumes/starts this coroutine.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pause"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"coid"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"coid"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"coid"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"pause"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"pause"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"pause"}],"output":{"name":"bool"}}],[11,"new","","Creates a new coroutine function from a given initializer.",3,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"init","","",3,{"inputs":[{"name":"self"},{"name":"scheduler"}],"output":null}],[11,"resume","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pause"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","A fresh zeroed builder.",4,{"inputs":[],"output":{"name":"self"}}],[11,"task","","Adds a task with the given name and coroutine.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"c"}],"output":{"name":"self"}}],[11,"run","","Runs starting from the given coroutine name and an initial message.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"t"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id_for","","Returns the identification for the given coroutine name.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["coid"],"name":"option"}}]],"paths":[[4,"Pause"],[8,"Coroutine"],[3,"CoId"],[3,"CoFn"],[3,"CoTasking"],[3,"Scheduler"]]};
searchIndex["coroustine"] = {"doc":"Repository: https://github.com/brunoczim/coroustine This crate implements coroutines in rust. Please note that, in this implementation, one cannot yield a function inside some control flow structre. Instead, the function must return either a `Yield` or a `Done`. Note also that a coroutine may not be an actual function. The coroutine only has to implement the trait `Coroutine<T>`. Actually, functions by themselves are not coroutines. Instead, they must be wrapped with `CoFn` or a custom wrapper. Look at this example. ```rust extern crate coroustine;","items":[[3,"CoId","coroustine","Identifies a single coroutine instance in a scheduler.",null,null],[3,"CoFn","","A boilerplate reduction for corroutines implemented as regular rust functions.",null,null],[3,"CoTasking","","Builds a Co-operative tasking with some given coroutines.",null,null],[3,"Scheduler","","A type that manages a co-operative tasking execution. Mostly invisible.",null,null],[4,"Pause","","Must be returned from a single call of `resume`.",null,null],[13,"Yield","","This means that the coroutine indeed paused. It contains the next function and a message.",0,null],[13,"Done","","This means that the coroutine actually stopped. This will make all tasks stop. It contains a final value.",0,null],[8,"Coroutine","","This trait defines a coroutine in order to be used with this crate.",null,null],[10,"init","","Initializes self, so it can, as an example, grab all necessary ids.",1,{"inputs":[{"name":"self"},{"name":"scheduler"}],"output":null}],[10,"resume","","Resumes/starts this coroutine.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pause"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"coid"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"coid"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"coid"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"pause"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"pause"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"pause"}],"output":{"name":"bool"}}],[11,"new","","Creates a new coroutine function from a given initializer.",3,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"init","","",3,{"inputs":[{"name":"self"},{"name":"scheduler"}],"output":null}],[11,"resume","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pause"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","A fresh zeroed builder.",4,{"inputs":[],"output":{"name":"self"}}],[11,"task","","Adds a task with the given name and coroutine.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"c"}],"output":{"name":"self"}}],[11,"run","","Runs starting from the given coroutine name and an initial message.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"t"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id_for","","Returns the identification for the given coroutine name.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["coid"],"name":"option"}}]],"paths":[[4,"Pause"],[8,"Coroutine"],[3,"CoId"],[3,"CoFn"],[3,"CoTasking"],[3,"Scheduler"]]};
searchIndex["corustine"] = {"doc":"Repository: https://github.com/brunoczim/corustine This crate implements coroutines in rust. Please note that, in this implementation, one cannot yield a function inside some control flow structre. Instead, the function must return either a `Yield` or a `Done`. Note also that a coroutine may not be an actual function. The coroutine only has to implement the trait `Coroutine<T>`. Actually, functions by themselves are not coroutines. Instead, they must be wrapped with `CoFn` or a custom wrapper. Look at this example. ```rust extern crate corustine;","items":[[3,"CoId","corustine","Identifies a single coroutine instance in a scheduler.",null,null],[3,"CoFn","","A boilerplate reduction for corroutines implemented as regular rust functions.",null,null],[3,"CoTasking","","Builds a Co-operative tasking with some given coroutines.",null,null],[3,"Scheduler","","A type that manages a co-operative tasking execution. Mostly invisible.",null,null],[4,"Pause","","Must be returned from a single call of `resume`.",null,null],[13,"Yield","","This means that the coroutine indeed paused. It contains the next function and a message.",0,null],[13,"Done","","This means that the coroutine actually stopped. This will make all tasks stop. It contains a final value.",0,null],[8,"Coroutine","","This trait defines a coroutine in order to be used with this crate.",null,null],[10,"init","","Initializes self, so it can, as an example, grab all necessary ids.",1,{"inputs":[{"name":"self"},{"name":"scheduler"}],"output":null}],[10,"resume","","Resumes/starts this coroutine.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pause"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"coid"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"coid"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"coid"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"pause"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"pause"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"pause"}],"output":{"name":"bool"}}],[11,"new","","Creates a new coroutine function from a given initializer.",3,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"init","","",3,{"inputs":[{"name":"self"},{"name":"scheduler"}],"output":null}],[11,"resume","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pause"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","A fresh zeroed builder.",4,{"inputs":[],"output":{"name":"self"}}],[11,"task","","Adds a task with the given name and coroutine.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"c"}],"output":{"name":"self"}}],[11,"run","","Runs starting from the given coroutine name and an initial message.",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"t"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id_for","","Returns the identification for the given coroutine name.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["coid"],"name":"option"}}]],"paths":[[4,"Pause"],[8,"Coroutine"],[3,"CoId"],[3,"CoFn"],[3,"CoTasking"],[3,"Scheduler"]]};
initSearch(searchIndex);
